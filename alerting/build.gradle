import java.nio.charset.StandardCharsets
import java.nio.file.Files

/*
 *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'elasticsearch.testclusters'
apply plugin: 'jacoco'

def usingRemoteCluster = System.properties.containsKey('tests.rest.cluster') || System.properties.containsKey('tests.cluster')
def usingMultiNode = project.properties.containsKey('numNodes')
// Only apply jacoco test coverage if we are running a local single node cluster
if (!usingRemoteCluster && !usingMultiNode) {
    apply from: '../build-tools/esplugin-coverage.gradle'
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

if (isSnapshot) {
    version += "-SNAPSHOT"
}

esplugin {
    name 'opendistro_alerting'
    description 'Amazon OpenDistro alerting plugin'
    classname 'com.amazon.opendistroforelasticsearch.alerting.AlertingPlugin'
    extendedPlugins = ['lang-painless']
}

// Prefer elastic bundled versions for conflicts (primarily with AWS SDK).  We need to specify these manually because
// esplugin sets ResolutionStrategy.failOnVersionConflict. Luckily it is also nice enough to expose (most of) the 
// versions it uses in ext.versions.

configurations.all {
    if (it.state != Configuration.State.UNRESOLVED) return
    resolutionStrategy {
        force "joda-time:joda-time:${versions.joda}"
        force "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
        force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
        force "commons-logging:commons-logging:${versions.commonslogging}"
        force "org.apache.httpcomponents:httpcore:${versions.httpcore}"
        force "commons-codec:commons-codec:${versions.commonscodec}"
        
        // This is required because kotlin coroutines core-1.1.1 still requires kotin stdlib 1.3.20 and we're using 1.3.21
        force "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
        force "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    }
}

dependencies {
    compileOnly "org.elasticsearch.plugin:elasticsearch-scripting-painless-spi:${versions.elasticsearch}"

    // Elasticsearch Nanny state
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    compile "org.jetbrains:annotations:13.0"

    compile project(":alerting-core")
    compile project(":alerting-notification")

    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
}

javadoc.enabled = false // turn off javadoc as it barfs on Kotlin code
licenseHeaders.enabled = true
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false

def es_tmp_dir = rootProject.file('build/private/es_tmp').absoluteFile
es_tmp_dir.mkdirs()

test {
    systemProperty 'tests.security.manager', 'false'
}

def _numNodes = findProperty('numNodes') as Integer ?: 1
integTest {
    runner {
        systemProperty 'tests.security.manager', 'false'
        systemProperty 'java.io.tmpdir', es_tmp_dir.absolutePath
        // The 'doFirst' delays till execution time.
        doFirst {
            // Tell the test JVM if the cluster JVM is running under a debugger so that tests can
            // use longer timeouts for requests.
            def isDebuggingCluster = getDebug() || System.getProperty("test.debug") != null
            systemProperty 'cluster.debug', isDebuggingCluster
            // Set number of nodes system property to be used in tests
            systemProperty 'cluster.number_of_nodes', "${_numNodes}"
            // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
            // not being written, the waitForAllConditions ensures it's written
            getClusters().forEach { cluster ->
                cluster.waitForAllConditions()
            }
        }

        // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
        if (System.getProperty("test.debug") != null) {
            jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
        }
    }
}

testClusters.integTest {
    testDistribution = "OSS"
    // Cluster shrink exception thrown if we try to set numberOfNodes to 1, so only apply if > 1
    if (_numNodes > 1) numberOfNodes = _numNodes
    // When running integration tests it doesn't forward the --debug-jvm to the cluster anymore
    // i.e. we have to use a custom property to flag when we want to debug elasticsearch JVM
    // since we also support multi node integration tests we increase debugPort per node
    if (System.getProperty("es.debug") != null) {
        def debugPort = 5005
        nodes.forEach { node ->
            node.jvmArgs("-agentlib:jdwp=transport=dt_socket,server=n,suspend=y,address=*:${debugPort}")
            debugPort += 1
        }
    }
}

run {
    doFirst {
        // There seems to be an issue when running multi node run or integ tasks with unicast_hosts
        // not being written, the waitForAllConditions ensures it's written
        getClusters().forEach { cluster ->
            cluster.waitForAllConditions()
        }
    }
}

apply from: '../build-tools/pkgbuild.gradle'

// TODO: need to remove all "aes" naming and related logic
buildscript {
    apply from: 'build-tools/dependencies.gradle'
    apply from: 'build-tools/repositories.gradle'

    repositories {
        //TODO: modify the order of evaluation, once we have artifacts in mavenCentral.
        maven {
            name = "internal-snapshots"
            url = "s3://open-es/snapshots"
            authentication {
                awsIm(AwsImAuthentication) // load from EC2 role or env var
            }
        }
        maven {
            name = "internal-releases"
            url = "s3://open-es/releases"
            authentication {
                awsIm(AwsImAuthentication) // load from EC2 role or env var
            }
        }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.openes.gradle:build-tools:${es_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

apply plugin: 'base'
apply plugin: 'jacoco'
apply from: 'build-tools/merged-coverage.gradle'

allprojects {
    apply from: "$rootDir/build-tools/repositories.gradle"

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "1.8"
    }
    plugins.withId('org.jetbrains.kotlin.jvm') {
        compileKotlin.kotlinOptions.jvmTarget = compileTestKotlin.kotlinOptions.jvmTarget = "1.8"
    }
}

subprojects {
    group = "org.openes.plugin"
    version = "${version}"
    boolean snapshot = "true".equals(System.getProperty("build.snapshot", "true"));
    if (snapshot) {
        // we update the version property to reflect if we are building a snapshot or a release build
        // we write this back out below to load it in the Build.java which will be shown in rest main action
        // to indicate this being a snapshot build or a release build.
        version += "-SNAPSHOT"
    }
}

evaluationDependsOnChildren()

/*
task release(type: Copy, group: 'build') {
    dependsOn allprojects*.tasks.build
    from(zipTree(findProject(':monitoring').tasks.bundlePlugin.outputs.files.getSingleFile()))
    into "build/plugins/${es_mv}/aes-monitoring"
    includeEmptyDirs = false
    // ES versions < 6.3 have a top-level elasticsearch directory inside the plugin zip which we need to remove
    eachFile { it.path = it.path - "elasticsearch/" }
    // Codebuild can't run ES as root so we can't run tests there. In that case depend on assemble
//    dependsOn project(':monitoring').tasks.assemble
}
*/

check.dependsOn subprojects*.check
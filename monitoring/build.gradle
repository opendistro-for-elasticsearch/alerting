apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'jacoco'
apply from: '../build-tools/esplugin-coverage.gradle'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

esplugin {
    name 'aes-monitoring'
    description 'Amazon Elasticsearch service monitoring plugin'
    classname 'com.amazon.elasticsearch.monitoring.MonitoringPlugin'
    extendedPlugins = ['lang-painless']
}

dependencies {
    compileOnly "org.elasticsearch.plugin:elasticsearch-scripting-painless-spi:${es_version}"

    // Elasticsearch Nanny state
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    compile "org.jetbrains:annotations:13.0"

    compile project(":core")
    compile project(":notification")
    compile project(':elastic-api')
    // Elastic API version specific code
    runtime project(elasticApiImplProject)

    // This needs to be declared manually as the offline dependencies task does not pick this up automatically for some reason
    checkstyle "com.puppycrawl.tools:checkstyle:${project.checkstyle.toolVersion}"
}

javadoc.enabled = false // turn off javadoc as it barfs on Kotlin code
licenseHeaders.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false

// See package README.md for details on using these tasks.
(1..3).each { i ->
    def _numNodes = findProperty('numNodes') as Integer ?: 1
    tasks.create(name : "runMultiNode$i", type: org.elasticsearch.gradle.test.RunTask) {
        daemonize = true
        numNodes = _numNodes
        setting 'node.name', "multi-node-$i"
        setting 'http.port', '9200-9300'
        setting 'transport.tcp.port', '9300-9400'
        clusterName = 'multi-node-run'
        plugin project.path
        distribution = es_distribution
    }
    
    tasks.create(name: "startMultiNode$i") {
        if (_numNodes == 1) {
            dependsOn "runMultiNode${i}#start"
        } else {
            (0..<_numNodes).each { n -> dependsOn "runMultiNode${i}#node${n}.start" }
        }
    }
}
task startMultiNode(dependsOn: startMultiNode1)

// Brazil doesn't allow access to /tmp which is the default temp dir.  Switch to a temp dir under the build root
def es_tmp_dir = rootProject.file('build/private/es_tmp').absoluteFile
es_tmp_dir.mkdirs()

test {
    testClassesDir = compileTestKotlin.destinationDir
    systemProperty 'tests.security.manager', 'false'
}

integTestRunner {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', es_tmp_dir.absolutePath
    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst { systemProperty 'cluster.debug', integTestCluster.debug }

    // TODO: Figure out how to have the runner execute both java and kotlin test classes which are present in
    // different output dirs.  Right now we only have kotlin tests.
    testClassesDir = compileTestKotlin.destinationDir

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArg '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

integTestCluster {
    distribution = es_distribution
}
run {
    distribution = es_distribution
}

afterEvaluate {
    repositories.remove(repositories.findByName("MavenRepo"))
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'org.jetbrains.kotlin.jvm'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
    aws_version = "1.11.223"
}

esplugin {
    name 'aes-monitoring'
    description 'Amazon Elasticsearch service monitoring plugin'
    classname 'com.amazon.elasticsearch.monitoring.MonitoringPlugin'
    extendedPlugins = ['lang-painless']
}

// We don't have unit tests, only integration tests.
test.enabled = false
// turn off javadoc as it barfs on Kotlin code
javadoc.enabled = false

// Uncomment to attach a debugger to elasticsearch cluster JVM during run or integTest
//run.debug true
//integTest.debug true

// We can't just create a single cluster with numNodes = 3 since that creates task dependencies in such a way that killing and
// restarting a single node also restarts all the other nodes.  Instead we setup 3 separate single node clusters with the
// same cluster name that we can start and kill separately using '../gradlew 'runMultiNodeTest1#start"
(1..3).each { i ->
    tasks.create(name : "runMultiNode$i", type: org.elasticsearch.gradle.test.RunTask) {
        daemonize = true
        numNodes = 1
        setting 'node.name', "multi-node-$i"
        setting 'http.port', '9200-9300'
        setting 'transport.tcp.port', '9300-9400'
        clusterName = 'multi-node-run'
        plugin project.path
        distribution = es_distribution
    }
}

// Brazil doesn't allow access to /tmp which is the default temp dir.  Switch to a temp dir under the build root
def es_tmp_dir = rootProject.file('build/private/es_tmp').absoluteFile
es_tmp_dir.mkdirs()

integTestRunner {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'java.io.tmpdir', es_tmp_dir.absolutePath
    include '**/*Tests.class'
    // TODO: Figure out how to have the runner execute both java and kotlin test classes which are present in
    // different output dirs.  Right now we only have kotlin tests.
    testClassesDir = compileTestKotlin.destinationDir

    // Uncomment to attach a debugger to integration tests JVM
//    jvmArg '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
}

// Use oss-zip distribution starting from 6.3.0
integTestCluster {
    distribution = es_distribution
}
run {
    distribution = es_distribution
}

licenseHeaders.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false

dependencies {
    compileOnly "org.elasticsearch.plugin:elasticsearch-scripting-painless-spi:${es_version}"
    
    // Elasticsearch Nanny state
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:${kotlin_version}"
    compile "org.jetbrains:annotations:13.0"

    compile project(":elastic-api")
    compile project(":core")
    compile project(":notification")
    // Elastic API version specific code
    if (es_mv == "6.3") {
        runtime project(':es63') // This should really be runtimeOnly but the Elastic gradle plugin doesn't copy that configuration into the plugin zip
    } else if (es_mv == "6.2") {
        runtime project(':es62') 
    }

    // This needs to be declared manually as the offline dependencies task does not pick this up automatically for some reason
    checkstyle "com.puppycrawl.tools:checkstyle:${project.checkstyle.toolVersion}"
}

afterEvaluate {
    repositories.remove(repositories.findByName("MavenRepo"))
}
